name: CI/CD Pipeline

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Nom de la branche à déployer'
        required: true
        default: 'latest'
  push:
    branches:
      - github-actions

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Start Docker containers
        run: docker-compose up -d

      - name: Wait for containers to be ready
        run: |
          echo "Checking container readiness..."
          CONTAINERS=("backend_container" "frontend_container" "mysql_db")
          for CONTAINER in "${CONTAINERS[@]}"; do
            while [ -z "$(docker ps --filter "name=$CONTAINER" --filter "status=running" -q)" ]; do
              echo "Waiting for $CONTAINER..."
              sleep 5
            done
          done
          echo "All containers are ready!"

      - name: Verify backend accessibility
        run: |
          BACKEND_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' backend_container)
          echo "Backend IP: $BACKEND_IP"
          timeout 30s bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' http://$BACKEND_IP:8000)" != "200" ]]; do sleep 5; done' || (echo "Backend not responding" && exit 1)

      - name: Test API endpoint
        run: |
          BACKEND_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' backend_container)
          response=$(curl -s http://$BACKEND_IP:8000/api/recettes/1)
          echo "API Response: $response"
          if [[ $response == *"error"* ]]; then
            echo "API request failed"
            exit 1
          fi

      - name: Check MySQL and execute query
        run: |
          MYSQL_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' mysql_db)
          docker exec mysql_db mysql -h$MYSQL_IP -uroot -proot -e "USE ofour; SELECT * FROM recettes WHERE id = 1;" || (echo "MySQL query failed" && exit 1)

      - name: Verify frontend
        run: |
          FRONTEND_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' frontend_container)
          timeout 30s bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' http://$FRONTEND_IP:5173)" != "200" ]]; do sleep 5; done' || (echo "Frontend not responding" && exit 1)

      - name: Stop Docker Compose
        run: docker-compose down


         
         
 


    # services:
    #   mysql:
    #     image: mysql:5.7
    #     env:
    #       MYSQL_ROOT_PASSWORD: root
    #       MYSQL_DATABASE: ofour
    #     ports:
    #       - 3306:3306
    #     options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    # steps:
    #   - name: Checkout repository
    #     uses: actions/checkout@v3

    #   - name: Set up Node.js
    #     uses: actions/setup-node@v3
    #     with:
    #       node-version: "16"
    #       registry-url: "https://registry.npmjs.org"

    #   - name: Check if Docker is installed
    #     run: docker --version

    #   - name: Install Docker Compose (if needed)
    #     run: |
    #       if ! [ -x "$(command -v docker-compose)" ]; then
    #         sudo curl -L "https://github.com/docker/compose/releases/download/v2.3.3/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    #         sudo chmod +x /usr/local/bin/docker-compose
    #       fi
    #       docker-compose --version

    #   - name: Stop system MySQL (if running)
    #     run: sudo systemctl stop mysql || true

    #   - name: Start MySQL container
    #     run: |
    #       docker run --name my-mysql -e MYSQL_ROOT_PASSWORD="${{ secrets.MYSQL_ROOT_PASSWORD }}" -e MYSQL_DATABASE=ofour -p 3307:3306 -d mysql:5.7

    #   - name: Copy .env file
    #     run: |
    #      printf "%s" "${{ secrets.MY_ENV_FILE }}" > ./backend/.env

    #   - name: Configure environment (MySQL details)
    #     run: |
         
    #      echo "DB_CONNECTION=mysql" >> ./backend/.env
    #      echo "DB_HOST=mysql" >> ./backend/.env
    #      echo "DB_PORT=3306" >> ./backend/.env
    #      echo "DB_DATABASE=ofour" >> ./backend/.env
    #      echo "DB_USERNAME=user_db" >> ./backend/.env
    #      echo "DB_PASSWORD=M0tDeP@ssSecur3!" >> ./backend/.env
    #      echo "MYSQL_ROOT_PASSWORD=root" >> ./backend/.env
    #      echo "ADMINER_DEFAULT_SERVER=mysql" >> ./backend/.env
    #      echo "Environment variables set successfully."


    #   - name: Set up PHP
    #     uses: shivammathur/setup-php@v2
    #     with:
    #       php-version: '8.2'
    #       extensions: mbstring, xml, bcmath, curl, zip

    #   - name: Install Composer dependencies
    #     working-directory: ./backend
    #     run: composer install --prefer-dist --no-progress --no-suggest --no-interaction

    #   - name: Set Laravel .env DB_HOST
    #     run: echo "DB_HOST=mysql" >> ./backend/.env

    #   - name: Generate APP_KEY
    #     working-directory: ./backend
    #     run: php artisan key:generate

    #   - name: Run database migrations
    #     working-directory: ./backend
    #     run: php artisan status

    #   - name: Run tests
    #     working-directory: ./backend
    #     run: php artisan test

  # sonarqube:
  #   runs-on: ubuntu-latest
  #   needs: build

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3

  #     - name: Install SonarScanner
  #       run: |
  #         curl -Lo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
  #         unzip sonar-scanner.zip
  #         echo "$PWD/sonar-scanner-5.0.1.3006-linux/bin" >> $GITHUB_PATH

  #     - name: Start SonarQube
  #       run: |
  #         docker run -d --name sonar \
  #         -p 9003:9000 \
  #         -e SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true \
  #         sonarqube:lts
  #         sleep 30

  #     - name: Wait for SonarQube
  #       run: |
  #         until curl -s http://localhost:9003/api/system/status | grep -q "OK"; do
  #           echo "Waiting for SonarQube..."
  #           sleep 5
  #         done
  #         echo "SonarQube is ready!"

  #     - name: Run SonarScanner (Backend)
  #       working-directory: ./backend
  #       run: |
  #         sonar-scanner \
  #           -Dsonar.host.url="http://localhost:9003" \
  #           -Dsonar.login="${{ secrets.SONAR_TOKEN }}"

  #     - name: Run SonarScanner (Frontend)
  #       working-directory: ./frontend
  #       run: |
  #         sonar-scanner \
  #           -Dsonar.host.url="http://localhost:9003" \
  #           -Dsonar.login="${{ secrets.SONAR_TOKEN }}"
