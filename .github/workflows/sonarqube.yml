name: Sonarqube
run-name: ${{ github.actor }}

on:
  workflow_dispatch:  # Déclenchement manuel via GitHub avec des inputs
    inputs:
      version:
        description: 'Sonarqube'  # Description de l'input
        required: true  # Cet input est obligatoire
        default: 'latest'  # Valeur par défaut si l'utilisateur ne fournit rien


  push:
    branches:
      - sonarqube
jobs:
  install_docker:
    runs-on: ubuntu-latest
    steps:
    - name: check docker version
      run: docker version 
      # - name: Installer Docker
      #   run: |
      #     sudo apt-get install ca-certificates curl
      #     sudo install -m 0755 -d /etc/apt/keyrings
      #     sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
      #     sudo chmod a+r /etc/apt/keyrings/docker.asc

      #     # Add the repository to Apt sources:
      #     echo \
      #       "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
      #       $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" | \
      #       sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
      #     sudo apt-get update
      #     sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
  
  start_Sonarqube_server:
    needs: install_docker
    runs-on: ubuntu-latest
    steps:
      - name: Démarrer le container SonarQube server
        run: docker run --name sonarqube-custom -p 9000:9000 sonarqube:10.6-community

      - name: Wait for SonarQube
        run: |
          until curl -s http://localhost:9003/api/system/status | grep -q "OK"; do
            echo "Waiting for SonarQube..."
            sleep 5
          done
          echo "SonarQube is ready!"

  analysis:
    if: ${{ always () }}
    needs: start_Sonarqube_server
    runs-on: ubuntu-latest
    steps:
      - name: Analyze with SonarQube

        # You can pin the exact commit or the version.
        # uses: SonarSource/sonarqube-scan-action@v1.1.0
        uses: SonarSource/sonarqube-scan-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_USER}}  # Needed to get PR information
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}   # Generate a token on SonarQube, add it to the secrets of this repo with the name SONAR_TOKEN (Settings > Secrets > Actions > add new repository secret)
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }} # add the URL of your instance to the secrets of this repo with the name SONAR_HOST_URL (Settings > Secrets > Actions > add new repository secret)
        with:
          # Additional arguments for the sonarcloud scanner
          args:
            # Unique key of your project. You can find it in SonarQube > [my project] > Project Information (top-right menu)
            # mandatory
            -Dsonar.projectKey=${{ vars.PROJECT_KEY }}
            # Comma-separated paths to directories containing main source files.
            #-Dsonar.sources= # optional, default is project base directory
            # When you need the analysis to take place in a directory other than the one from which it was launched
            #-Dsonar.projectBaseDir= # optional, default is .
            # Comma-separated paths to directories containing test source files.
            #-Dsonar.tests= # optional. For more info about Code Coverage, please refer to https://docs.sonarcloud.io/enriching/test-coverage/overview/
            # Adds more detail to both client and server-side analysis logs, activating DEBUG mode for the scanner, and adding client-side environment variables and system properties to the server-side log of analysis report processing.
            #-Dsonar.verbose= # optional, default is false
